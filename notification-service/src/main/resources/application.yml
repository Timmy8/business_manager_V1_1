spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres_db:5432/business_manager}
    username: ${SPRING_DATASOURCE_USERNAME:database_user}
    password: ${SPRING_DATASOURCE_PASSWORD:database_user_password}
  flyway:
    enabled: true
    locations: classpath:db/migration
    schemas: notification_service
    baselineOnMigrate: false
    clean-disabled: true
  jpa:
    show-sql: false
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME:my.user@example.com}
    password: ${EMAIL_PASSWORD:email_password}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
    notification:
      message:
        subject: New notification from business manager
        from: my.user@example.com
  kafka:
    bootstrap-servers: ${KAFKA_DATASOURCE_URL:kafka:9092}
    consumer:
      group-id: ${KAFKA_GROUP_ID:notification-group}
      ey-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      max-poll-records: 100
      enable-auto-commit: true
      max-poll-interval: 30000
      retry:
        backoff-ms: 25000

telegram:
  bot:
    token: ${TELEGRAM_BOT_TOKEN:tg_bot_token}

management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info}
  info:
    env:
      enabled: true

info:
  app:
    name: Business manager - Notification service
    description: A service for sending notifications to any desired channel
    version: 1.1.0
server:
  port: 8082