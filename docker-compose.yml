# All variables should be changed in .env file!!!
services:
  # Database service
  postgres_db:
    image: postgres:16-alpine
    container_name: bm-postgres
    environment:
      POSTGRES_DB: business_manager
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    networks:
      - backend
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Core-api service
  core-api-service:
    build:
      context: .
      dockerfile: /core-api-service/Dockerfile.core-api-service
    container_name: core-api-service
    environment:
      KAFKA_DATASOURCE_URL: ${KAFKA_DATASOURCE_URL}
      SPRING_DATASOURCE_URL: ${POSTGRES_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_SECURITY_USERNAME: ${ADMIN_USERNAME}
      SPRING_SECURITY_PASSWORD: ${ADMIN_PASSWORD}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${CORE_API_MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
    depends_on:
      - postgres_db
    ports:
      - "8081:8081"
    networks:
      - frontend
      - backend
    volumes:
      - core-api-service-logs:/app/logs

  # Manager-ui service
  manager-ui-app:
    build:
      context: .
      dockerfile: /manager-ui-app/Dockerfile.manager-ui-app
    container_name: manager-ui-app
    environment:
      CORE_API_SERVICE_URI: ${CORE_API_SERVICE_URI}
      SPRING_SECURITY_USERNAME: ${ADMIN_USERNAME}
      SPRING_SECURITY_PASSWORD: ${ADMIN_PASSWORD}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${MANAGER_UI_MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
    depends_on:
      - core-api-service
    ports:
      - "8080:8080"
    networks:
      - frontend

  # Notification service
  notification-service:
    build:
      context: .
      dockerfile: /notification-service/Dockerfile.notification-service
    container_name: notification-service
    environment:
      KAFKA_DATASOURCE_URL: ${KAFKA_DATASOURCE_URL}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${NOTIFICATION_MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
    ports:
      - "8082:8082"
    networks:
      - backend

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: bm-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - backend

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: bm-kafka
    environment:
      #General settings
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      # Security settings
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      # Logging settings
      KAFKA_LOG_RETENTION_BYTES: 10737418
      KAFKA_LONG_SEGMENT_BYTES: 10737418
      # Network settings
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_CONNECTIONS_MAX_IDLE_MS: 300000
      # Monitoring settings
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_CLEANUP_INTERVAL_MS: 300000
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - backend
    volumes:
      - kafka-data:/var/lib/kafka/data

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres-data:
  kafka-data:
  core-api-service-logs: